int binsearch(int x, int[ ] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
/*@ensures (-1 == \result && !is_in(x, A, 0, n))
       || ((0 <= \result && \result < n) && A[\result] == x);
  @*/
{ int lower = 0;
  int upper = n-1;
  while (lower < upper)
    //@loop_invariant 0 <= lower && lower <= upper+1 && upper < n;
    //@loop_invariant (lower == 0 || A[lower-1] < x);
    //@loop_invariant (upper == n-1 || A[upper] >= x);
    { 
      if(A[upper]==x) return upper;
      int mid = lower + (upper-lower)/2;
      //@assert lower <= mid && mid < upper;
      if (A[mid] == x) return mid;
      else if (A[mid] < x) lower = mid+1;
      else /*@assert(A[mid] > x);@*/
        upper = mid;
    }
   return -1;
}
